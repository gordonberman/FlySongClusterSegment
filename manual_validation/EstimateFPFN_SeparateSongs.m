function [fn,fp,fd] = EstimateFPFN_SeparateSongs(tempfile,alloutput,...
    categorytimes)
    %Use initial assignment of templates,
    %in combination with times known to represent signal and noise
    %AND counts of peaks in signal regions
    %to evaluate outputData for certain parameters by estimating
    %the false negative rate (false negative/true positive)
    %and the false positive rate (false positive/true positive)
    %read in csv file with signal/noise regions and counts
    %Modified 12/14/16 to accept signalAssignments and noiseAssignments
    %from SeparateSongsAssign....
    %Input:
    %tempfile (string): a .mat file containing 'isNoise' from
    %createTemplates.m
    %alloutput (string): a .mat file containing 'peakIdxGroup' from
    %assignDataToTemplates.m OR a .mat file containing 'signalAssignments'
    %and 'noiseAssignments' from SeparateSongsAssignTemplates
    %category times (string): a .csv file containing the columns 'cumtime'
    %(cumulative time in the validation file), 'category' (signal or
    %noise), and 'numpeaks' (number of pulses in the corresponding
    %interval), generated by adding the 'numpeaks' column to the
    %'...order.csv' file generated by randomizeAndCombineSignalNoiseWav.m
    if exist(categorytimes,'file') == 2
        cattimetable = readtable(categorytimes,'Delimiter',',');
    else
        error('Song subset breakdown file %s does not exist\n',categorytimes);
    end
    %just in case, sort the table by cumtime (necessary for next steps)
    cattimetable = sortrows(cattimetable,'cumtime','ascend');
    %get initial peak assignments
    if exist(alloutput,'file')==2
        %test which type of output it is
        %what is the best way to test this? Nothing appears to be great.
        %prelimdata = load(alloutput, 'peakIdxGroup');
        prelimdata = load(alloutput); %modified to load whatever's in the file
        if isfield(prelimdata, 'peakIdxGroup')
            combinedsongs = true;
        elseif isfield(prelimdata, 'signalAssignments')
            combinedsongs = false;
        else
            error('Unrecognized output in %s\n',alloutput);
        end
    else
        error('assignDataToTemplates output %s does not exist\n',alloutput);
    end
    %get isNoise OR isNoiseTemplateGroupings
    if exist(tempfile,'file')==2
        %tempvar = who('-file',tempfile);
        tempdata = load(tempfile, 'outputData');
        %if ismember(tempvar,'templateGroupings')
        if isfield(tempdata.outputData,'isNoiseTemplateGrouping')
            %tempdata = load(tempfile, 'isNoiseTemplateGrouping');
            whichsignal = find(1-tempdata.outputData.isNoiseTemplateGrouping);
        else
            tempdata = load(tempfile, 'isNoise');
            whichsignal = find(1-tempdata.isNoise);
        end
    else
        error('createTemplates output %s does not exist\n',tempfile);
    end
    %name output file based on input file
    [outdir,outbase,~] = fileparts(alloutput);
    outbase = [outbase '_fpfn'];
    %add one column for observed counts
    cattimetable.calledpeaks = zeros(height(cattimetable),1);
    cattimetable.falsepositive = zeros(height(cattimetable),1);
    cattimetable.falsenegative = zeros(height(cattimetable),1);
    %loop over peakIdxGroup (only signal templates)
    %templates = (1:length(prelimdata.peakIdxGroup))';
    %whichsignal = find(1-tempdata.isNoise);
    %loop over time intervals
    for t=1:height(cattimetable)
        if t==1
            timeint = {1, cattimetable.cumtime(1)};
        else
            timeint = {cattimetable.cumtime(t-1)+1,cattimetable.cumtime(t)};
        end
        %for each interval, determine if signal/noise
        issig = 0;
        if strcmp(cattimetable.category(t), 'signal')
            issig = 1;
        end
        numpeaks = 0;
        if ~combinedsongs
            %[~,wavbase,~] = fileparts(cattimetable.wavlist(t));
            if issig
                allsidx = strfind(prelimdata.signalnames, cattimetable.wavlist(t));
                sidx = find(not(cellfun('isempty', allsidx)));
                if ~isempty(sidx)
                    sfilename = prelimdata.signalAssignments{sidx};
                    currdata = load(sfilename);
                else
                    error('Could not find %s in signalAssignments\n',cattimetable.wavlist(t));
                end
            else
                allnidx = strfind(prelimdata.noisenames, cattimetable.wavlist(t));
                nidx = find(not(cellfun('isempty', allnidx)));
                if ~isempty(nidx)
                    nfilename = prelimdata.noiseAssignments{nidx};
                    currdata = load(nfilename);
                else
                    error('Could not find %s in noiseAssignments\n',cattimetable.wavlist(t));
                end
            end
            for g=1:length(whichsignal)
                %count the # of peaks for this template
                try
                    numpeaks = numpeaks + length(currdata.peakIdxGroup{whichsignal(g)});
                catch MEmatdim
                    disp(g)
                    disp(whichsignal(g))
                    disp(length(currdata.peakIdxGroup))
                    disp(cattimetable.wavlist(t))
                    rethrow(MEmatdim)
                end
            end
        else
            for g=1:length(whichsignal)
                %count the # of peaks for this template
                numpeaks = numpeaks + sum(prelimdata.peakIdxGroup{whichsignal(g)} ...
                    >= timeint{1} & prelimdata.peakIdxGroup{whichsignal(g)} < timeint{2});
            end
        end
        %assign to template-specific column?
        cattimetable.calledpeaks(t) = numpeaks;
        %add to signalpeaks or noisepeaks
        if issig == 1
            if numpeaks > cattimetable.numpeaks(t)
                cattimetable.falsepositive(t) = numpeaks - cattimetable.numpeaks(t);
            else
                cattimetable.falsenegative(t) = cattimetable.numpeaks(t) - numpeaks;
            end
        else
            cattimetable.falsepositive(t) = numpeaks;
        end
    end
    %Save just false positive and false negative rates
    %Has to be calculated per interval.... 
    fp = sum(cattimetable.falsepositive)/sum(cattimetable.numpeaks);
    fn = sum(cattimetable.falsenegative)/sum(cattimetable.numpeaks);
    %Also save false discovery rate (1 - FDR = PPV or precision)
    fd = sum(cattimetable.falsepositive)/(sum(cattimetable.numpeaks)+sum(cattimetable.falsepositive));
    save(fullfile(outdir, [outbase '.mat']),'fp','fn','fd');
    [~,alloutputfn,~] = fileparts(alloutput);
    fprintf(['For %s,\n the false positive rate is %.5f, ' ...
        'and the false negative rate is %.5f.\n'],alloutputfn,fp,fn);
    ftab = table(fp,fn,fd);
    writetable(ftab, (fullfile(outdir, [outbase '.csv'])));
    %Additionally, add to existing csv (1 columns for each template)?
    writetable(cattimetable, fullfile(outdir, ['PerIntervalPeaks' outbase '.csv']));

end
